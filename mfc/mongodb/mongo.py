"""Что такое MongoDB?"""
# MongoDB - это документно-ориентированная NoSQL-БД, используемая для хранения и управления данными в формате JSON-подобных документов (СУБД).
# MongoDB разработана для обеспечения высокой производительности, масштабируемости и гибкости в работе с данными.

# Основные характеристики MongoDB
# 1. Документная модель. Данные храняться в виде документов, которые представляют собой структуры данных в формате BSON (Binary JSON).
# Это позволяет хранить сложные и вложенные данные.

# 2. Гибкость схемы. В отличие от реляционных БД, монго не требует строгой схемы.
# Это означает, что разные документы в одной коллекции могут иметь разные структуры.

# 3. Масштабируемость. MongoDB поддерживает горизонтальное масштабирование,
# что позволяет добавлять новые серверы для обработки увеличиващщегося объёма данных и нагрузки.

# 4. Высокая производительность. MongoDB оптимизирована для быстрого чтения и записи данных,
# что делает её подходящей для приложений с высокими требованиями к производительности.

# 5. Поддержка индексов. MongoDB позволяет создавать индексы для ускорения поиска и обработки данных.
# 6. Запросы и агрегация. MongoDB предоставляет мощный язык запросов и инструменты для агрегации данных, что позволяет выполнять сложные операции над данными.

# MongoDB широко используется в различных приложениях, включая веб-приложения, мобильные приложения, аналитические системы и многое другое, благодаря своей гибкости и способности обрабатывать большие объёмы данных.
# MongoDB из коробки поддерживает горизонтальное масштабирование с помощью шардирования, благодаря чему данные распределяются по нескольких серверам, повышая производительность и отказоустойчивость системы.


"""Основные понятия MongoDB"""
# 1. Шардирование - метод распределния данных по нескольким серверам или узлам для повышения производительности и масштабируемости БД.
# Подход "Шардирование" позволяет разбивать большие объёмы данных на более мелкие, управляемые части, называемые шардами.
# Каждый шард хранит только часть данных, что позволяет уменьшить нагрузку на отдельные серверы и ускорить доступ к данным.

# 2. Коллекция - группа (совокупность) документов без определённой структуры. Это как гибкая таблица, и документы в ней имеют разный набор полей.
# Данные Монго храняться в коллекциях, которые состоят из документов. Коллекции храняться в БД. Коллекции - Users, Orders и т.д.

# 3. Документ - это запись в коллекции. Документ похож на строку в таблице реляционных БД, с тем отличием, что разные документы в коллекциях могут иметь разный набор полей.


"""Архитектура MongoDB"""
# 1. MongoD - основной процесс сервера MongoDB, который отвечает за обработку запросов, управление данными и выполнение операций с базой данных.
# Он предоставляет доступ к данным и является самым ключевым компонентом.

# 2. MongoS - процесс, используемый в шардированных кластерах MongoDB для взаимодействия с различными шардами.
# Он действует как маршрутизатор запросов и направляет их в определённые шарды, и обеспечивает распределённую обработку запросов.

# 3. MongoSH (MongoSHELL) - консольная утилита, с помощью которой мы (пользователи) можем общаться с MongoDB: выполнять запросы, создавать и изменять данные, управлять индексами и выполнять прочие команды.

"""Установка MongoDB (Windows)"""
# 1. Запустить Docker Desktop
# 2. Открыть cmd
# 3. docker run --name mongodb -d -p 27017:27017 -v mongodb_data:/data/db mongo
# 4. docker ps (проверяем, что контейнер запущен)
# 5. docker exec -it 406f5845a98b mongosh (Подключаемся к MongoDB прямо из контейнера, к дефолтной базе test), (406f5845a98b - номер, который полулиьи в docker ps)

# 6. docker exec -it 406f5845a98b mongosh 'mongodb://user:password@host:port/database?params' (если нужно подключиться к конкретной базе)
# user:password - логин и пароль (при необходимости) @ host:port (хост и порт, на котором развёрнуто MongoDB) / база данных, к которой подключаемся ? параметры подключения (разегистрован ли пользователь в базе admin, использует ли TLS и т.д.)

"""Работа с MongoDB (Команды)"""
# show dbs - отображение всех баз данных
# use mydb - создание базы данных
# show collections - просмотр всех коллекций

# db.users.insertOne({ name: 'Alex', age: 25 }) - создаём коллекцию пользователей и добавляем в неё документ

# db.users.insertMany([{}, {}, {}]) - добавление нескольких документов за один раз
# Пример заполнения:
# test> db.users.insertMany([
# ... { name: 'Mike', age: 19, verified: true },
# ... { name: 'Bob', age: 31, email: 'bob@gmail.com' }
# ... ])

# db.users.find() - получаем все записи коллекции (users)

# db.users.find().limit(2) - ограничение выдачи до 2 документов
# db.users.find().limit(2).skip(1) - выводим документы, начиная со второго (первый пропускам)

## сортировка
# db.users.find().sort({ age: 1 }) - сортируем пользователей по НЕУБЫВАНИЮ (1 указывает на сортировку по НЕУБЫВАНИЮ)
# db.users.find().sort({ age: -1 }) - сортируем пользователей по УБЫВАНИЮ (1 указывает на сортировку по УБЫВАНИЮ)

## фильтрация записей
# db.users.find({ name: 'Bob' }) - отображение информации о конкретном человеке (Bob)
# db.users.find({ age: {$lt: 31} }) - найти пользователей возрастом не старше 31 (НЕ РАВНО 31)
# db.users.find({ age: {$lt: 31}}, {name: 1} ) - возвращаем только часть полей (после запятой указываем набор полей, которые хотим получить. 1 - означает, что данные будут отображены в ответе)
# db.users.find({ age: {$lt: 31}}, {name: 1, _id:0}) - убираем поле ID из результатов выдачи.

# db.users.find({ age: {$lte: 31}}) - найти пользователей возрастом НЕ БОЛЬШЕ 31 (ВКЛЮЧАЯ 31).
# db.users.find({ age: {$gte: 31}}) - найти пользователей возрастом БОЛЬШЕ 31 или равным 31
# db.users.find({ age: {$gt: 31}}) - найти пользователей возрастом БОЛЬШЕ 31

## поиск по наличию/отсутствию определённых полей в документе (например, нужно найти документы, где нет определённого поля)
# db.users.find({ email: {$exists: true} })- находим все документы, у которых ПРИСУТСТВУЕТ поле email
# db.users.find({ email: {$exists: false} }) - находим все документы, у которых ОТСУТСТВУЕТ поле email

## выборка (допустим, нас интересуют только пользователи с возрастами 19,25 и 29)
# db.users.find({ age: {$in: [19, 25, 29]} }) - только пользователи с возрастом 19, 25 и 29
# db.users.find({ age: {$gte: 18, $lte: 60} }) - только пользвоатели БОЛЬШЕ ЛИБО РАВНО 18 и БОЛЬШЕ ЛИБО РАВНО 60

## логические операторы (and, or, not)
# db.users.find({ $and: [{ age: {$gt: 20}}, {email: {$exists: false}}]}) - находим всех пользователей старше 20 лет, у которых отсутствует поле email в документе
# db.users.find({ age: {$gt: 20}, email: {$exists: false} }) - эта запись эквивалентна вышестоящей

# db.users.find({ $or: [{age: {$gt: 20}}, {email: {$exists: false}}] }) - или одно условие, или второе

# db.users.find({ name: {$not: {$eq: 'Bob'}} }) - находим все поля, где поле name НЕ РАВНО 'Bob'
# $eq - оператор сравнения, проверяющий, равно ли значение указанному значению. Используется для поиска документов, где поле соответствует заданному значению.

# Добавление вложенной структуры данных
# test> db.users.insertOne({
# ... name: 'Tom',
# ... age: 33,
# ... address: {
# ... street: 'Avenida de Liberdade 1',
# ... city: 'Lisboa'
# ... }
# ... })

## поиск по вложенным полям
# db.users.find({'address.city': 'Lisboa'}) - находим документы с городом Lisboa в поле адрес. КАВЫЧКИ ОБЯЗАТЕЛЬНЫ!
# db.users.countDocuments({ age: {$gt: 30} }) - поиск количества пользователей старше 30 лет
# db.users.count({ age: {$gt: 30} }) - поиск количества пользователей старше 30 лет - в старых версия используем count

## Аргерация. С помощью агрегации можно выполнять сложные операции вроде группировки, фильтрации и подсчёта, что полезно для анализа данных.
# С помощью агрегации можно получить статистику по пользователям, сгрупировав их в категории.

# ---- Разобрать самостоятельно ----

"""Измнение данных в документе"""

## Обновление созданных документов
# updateOne() - обновляем один документ, updateMany() - обновляем несколько документов

# db.users.updateMany(документы для изменения, что именно хотим сделать)

# Увеличиваем у всех пользователей значение поля age на 1
# db.users.updateMany({}, {$inc: {age: 1}}) - {} значит все документы,

# Переименовать поле 'address' для всех документов, у которых поле есть
# db.users.updateMany({ address: {$exists: true} }, {$rename: {'address': 'addrEEs'}})

# Добавляем документу новое поле
# db.users.updateOne({_id: ...}, {$set: {newField: 'abc'}})
# db.users.findOne({_id: ObjectId('67f26df01a2f15dc136b140e')}) - Посмотреть информацию о конкретном документе

# Удаление полей (оператор unset)
# db.users.updateOne({_id: ...}, {$unset: {newField: 'abc'}})

## Добавление элементов в массив (push)
# db.users.updateOne({_id: ObjectId('67f26df01a2f15dc136b140e')}, {$push: {permissions: 'create_post'}})
# db.users.updateOne({_id: ObjectId('67f26df01a2f15dc136b140e')}, {$push: {permissions: 'delete_post'}})

## Удаление элементов из массива (pull)
# db.users.updateOne({_id: ObjectId('67f26df01a2f15dc136b140e')}, {$pull: {permissions: 'delete_post'}})

## Удаление документов - deleteOne(), deleteMany()
# db.users.deleteMany({ age: {$gt: 30} })- удаляем всех пользователей старше 30 лет

## Удаление коллекций (включая все документы) - drop
# db.users.drop() - удалить коллекцию users

## Удаление базы данных со всеми её коллекциями
# db.dropDatabase()

"""Индексация в MongoDB"""
# Индексы используются для ускорения запросов.
# Они особенно полезны, когда коллекция содержит большое количество документов и к этой коллекции приходится часто обращаться с однотипными запросами.

# db.users.createIndex({ age: 1 }) - индекс на одно поле
# db.users.createIndex({ age: -1, name: 1}) - индекс на группу полей
# db.users.getIndexes() - просмотр всех индексов
# db.users.dropIndex('age_-1_name_1') - удаление индексов