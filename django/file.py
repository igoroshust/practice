# Шаблоны Джанго

"""Django Flatpages"""
# Django Flatpages - это приложение в рамках фреймворка Django, которое позволяет создавать и управлять статическими страницами на сайте.
# Оно предназначено для простого создания контента, который не требует сложной логики или динамического взаимодействия с базой данных.

# Основные особенности:
# 1. Простота использования. Flatpages позволяет легко добавлять и редактировать статические страницы через административный интерфейс Django.
# 2. Поддержка шаблонов. Можно использовать шаблоны Django для оформления страниц, что позволяет интегрировать их в общий дизайн вашего сайта.
# 3. URL-адресация. Каждая страница может иметь свой собственный URL, что позволяет легко ссылаться на них из других частей сайта.
# 4. Поддержка многоязычности. Flatpages может быть использован в иногоязычных проектах при условии использования соответствующих настроек и библиотек.
# 5. Интеграция с другими приложениями. Flatpages можно комбинировать с другими приложениями Django, такими как комментарии или аутентификация, для расширения функциональности.

# Чтобы использовать Django Flatpages, нужно добавить его в проект, настроить URL-адресацию и создать страницы через административный интерфейс.
# Это делает Django Flatpages отличным выбором для сайтов, где требуется размещение простого контента вроде "О нас", "Контакты" и т.д.

########## Внедрение Django Flatpages ##############
# 1. В файле settings.py пишем SITE_ID = 1
# 2. В MIDDLEWARE пишем 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
# 3. В INSTALLED_APPS добавляем 'django.contrib.sites' и 'django.contrib.flatpages'
# 4. Выполняем миграции python manage.py migrate
# 5. Запускаем сервер и переходим в админку и видим flatpages и sites

# 6. Переходим в urls.py (project root):
# from django.urls import path, include
# urlpatterns = [
#   path('pages/', include('django.contrib.flatpages.urls')),
# ]

# 7. В админке создаём страницу flatpages (имя /about/, например)
# 8. Создаём папку templates в корне django-проекта (на одном уровне с manage.py)
# 9. Внутри templates папка flatpages
# 10. Внутри flatpages создаём файл default.html
# 11. Внутри default.html создаём разметку и, чтобы подтянуть данные из админки, использует шаблонизатор
# {{ flatpage.title }}, {{ flatpage.content }}
# 12. Если хотим настроить конкретную страницу (не default) в advanced options указываем flatpages/about.html
# 13. Если возникли проблемы с нахождением шаблона, то в settings.py, в TEMPLATES, пишем: 'DIRS': [os.path.join(BASE_DIR, 'templates')]

# Для регистрации дополнительных полей (позволить комментировать, отображение только зарегистрированным пользователям)
# Нужно зарегистрировать класс, наследуемый от FlatPageAdmin, при этом добавив в него нужные поля самостоятельно
# 1. Создаём файл fpages (внутри project), внутри создаём файл admin.py с содержимым:

# from django.contrib import admin
# from django.contrib.flatpages.admin import FlatPageAdmin as BaseFlatPageAdmin
# from django.contrib.flatpages.models import FlatPage
# from django.utils.translation import gettext_lazy as _
#
# # Определяем нового админа FlatPageAdmin
# class FlatPageAdmin(BaseFlatPageAdmin):
#     # Определяем структуру полей для админки
#     fieldsets = ( # атрибут в Django, который используется для определения структуры и группировки полей в административной панели.
#         # Первая группа полей без заголовка
#         (None, {
#             'fields': ('url', 'title', 'content', 'sites')
#         }),
#         # Расширенные настройки
#         (_('Advanced options'), {
#             'classes': ('collapse', ), # список css-классов (сворачиваемый блок)
#             'fields': (
#                 'enable_comments', # Поле для включения комментариев
#                 'registration_required', # Поле для требования регистрации
#                 'template_name', # Поле для указания имени шаблона
#             ),
#         }),
#     )

# Перерегистрация FlatPageAdmin
# admin.site.unregister(FlatPage)
# admin.site.register(FlatPage, FlatPageAdmin)

# 2. В INSTALLED_APPS добавляем 'fpages'
# 3. + После настроек нужно проверить путь fpages/... (имя папки может исчезнуть)

"""fieldsets"""
# fieldsets - это атрибут в Django, который используется для определения структуры и группировки полей в административной панели.
# Он позволяет организовать поля форма в логические группы, что делает интерфейс более удобным для пользователя.
# В нашем случае выше:
# `None` - это значение для обозначения группы полей, не имеющих заголовка. В данном случае там содержатся основные поля.
# `_('Advanced options') - строка для интернационализации с помощью `_()`. В данном случае это заголовок для группы дополнительных опций.

# `fields` - список полей, которые будут отображаться в данной группе. Определяет, какие именно поля будут включены в конкретный `fieldset`
# `classes` - список CSS-классов, которые будут применены к группе полей




"""SITE_ID = 1"""
# SITE_ID - это настройка, которая используется в контексте приложения `django.contrib.sites`.
# Это приложение позволяет управлять несколькими сайтами с помощью одной базы данных и одного проекта Django.
# Каждому сайту присваивается уникальный идентификатор (ID), который хранится в таблице `Site`

# SITE_ID = 1 указывает, какой сайт из базы данных будет использоваться в текущем проекте.
# Это особенно полезно, когда есть несколько сайтов, работающих на одном проекте Django.
# Некоторые приложения, например как `django.contrib.flatpages`, могут использовать `SITE_ID` для определения, к какому сайту относится контент.
# Это позволяет, напирмер, отображать разные страницы для разных сайтов.

"""Подключение стилей (Bootstrap)"""
# 1. Скачиваем доступный шаблон
# 2. Внутри проекта (на одном уровне с manage.py) создаём папку static, в неё закидываем шаблон
# 3. В settings.py создаём STATICFILES_DIRS = [BASE_DIR / 'static']
# 4. Копируем содержимое index.html (из шаблона) и вставляем в default
# 5. В файле default.html пишем:
# {% load static %}
# <link href="{% static 'css/styles.css' %}" rel="stylesheet" />