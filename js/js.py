"""JavaScript"""
# JS - это язык программирования, который используется для создания интерактивных элементов на веб-страницах.
# Он работает в браузере и позволяет разработчикам добавлять динамические поведение к HTML-документу.

"""Подключение"""
# 1. Внутри тега script
# <script>
#     console.log('Hello, world!')
# </script>


# 2. Внешний файл
# <script src="script.js"></script>

"""Переменные"""
# var - устаревший способ, имеет функциональную область видимости (внутри функции или глобально)
# + переменные доступны до их объявления. Может быть переопределена в той же области видимости.


# let - современный способ, имеет блочную область видимости (внутри фигурных скобок {}) + нельзя обратить до объявления
# + нельзя повторно обратиться в той же области видимости

# const - используется для объявления констант, значение которых не может быть изменено.

# let name = 'Alice'
# const age = 30;


"""Типы данных"""
# Примитивные: string, number, boolean, null, undefined, symbol, bigint
# Ссылочные: object (включает массивы и функции)

"""Операторы"""
# Арифметические
# Сравнения
# Логические (&&, ||, !)


"""Условные конструкции"""
# const age = 30;
#
# if (age <= 18) {
#   console.log('Взрослый');
# } else {
#   console.log('Несовершеннолетний');
# }


"""Циклы"""
# for
# for (let i = 0; i < 5; i++) {
#   console.log(i)
# }

# while
# let i = 0;
# while (i < 5) {
#   console.log('Итерация: ' + i);
#   i++;
# }

# do...while (условие проверяется после выполнения блока кода; гарантирует, что блок кода выполнится хотя бы один раз)
# let i = 77;
# do {
#   console.log('Итерация: ' + i);
#   i++;
# } while (i < 5);

"""Функции"""
# Функции могут быть объявлены с помощью ключевого слова function или как стрелочные

# Пример обычной функции
# function greet(name) {
#   return 'Hello, ' + name;
# }
#
# result = greet('Igor')
#
# document.write(result)

# Пример стрелочной функции
# const greet = (name) => 'Hello, ' + name;

# Разница в написании функций
#
# const add = function(a, b) {
#   return a + b;
# }
# Та же функция в стрелочном виде
# const add = (a, b) => a + b;


"""Конструкция switch"""
# Конструкция switch используется для выполнения разных действий на основе различных значений переменной.
# Это удобный способ обработки множества условий.

# let day = 3;
# let dayName;
#
# switch (day) {
#   case 1:
#     dayName = 'Monday';
#     break;
#   case 2:
#     dayName = 'Thursday';
#     break;
#   case 3:
#     dayName = 'Thirsday'
#     break;
#   default:
#     dayName = 'Uncorrect day.'
# }
#
# console.log(dayName)




"""Массивы и объекты"""
# Массивы - упорядоченные коллекции данных
# let fruits = ['apple', 'banana']
# document.write(fruits)

# Объекты - неупорядоченные коллекции пар "ключ-значение"
# let person = {
#   name: 'Alice',
#   age: 30
# };


"""Работа с DOM"""
# JS позволяет взаимодействовать с элементами HTML через DOM. То есть, можно изменять текст, стили и структуру страницы.
# Пример
# document.getElementById('myElement').innerText = 'Hello, World!';


"""События"""
# JS позволяет обрабатывать события, такие как клики, наведение мыши  и т.д. Это делается с помощью слушателя событий.
# document.getElementById('myButton').addEventListener('click', function() {}
#    alert('Button clicked!');
# });


"""Асинхронность"""
# JS поддерживает асинхронное программирование с помощью колбеков, промисов и async/await.
# let promise = new Promise((resolve, reject) => {
#   // Асинхронная операция
#   resolve('Success!');
# });
#
# promise.then(result => {
#   console.log(result);
# });

"""Модули"""
# JS поддерживает модули, что позволяет организовывать код в отдельные файлы и использовать import и export
# Пример
# // module.js
# export const myFunction = () => { /* ... */ }
#
# // main.js
# import { myFunction } from './module.js';

"""Прототипы и наследование"""
# JS использует прототипное наследование. Каждый объект имеет свойство prototype, позволяющее создавать цепочку прототипов.

# function Person(name) {
#   this.name = name;
# }
#
# Person.prototype.greet = function() {
#   console.log('Hello, ' + this.name);
# };
#
# const alice = new Person('Alice');
# alice.greet();


"""Замыкания"""
# Замыкание - это функция, которая имеет доступ к своей внешней функции даже после того, как внешняя функция завершила выполнение.
# Это полезно для создания приватных переменных.
# function makeCounter() {
#   let count = 0;
#   return function() {
#     count++;
#     return count;
#   };
# }
#
# const counter = makeCounter();
# console.log(counter());
# console.log(counter());
# console.log(counter());


"""Обработка ошибок"""
# Обработка ошибок посредством try, catch, finally, throw
# try {
#   throw new Error('Something went wrong!');
# } catch (error) {
#   console.error(error.message);
# } finally {
#   console.log('This will always run.')
# }

"""Работа с API"""
# JS позволяет взаимодействовать с внешними API через fetch, что позволяет делать HTTP-запросы.
# fetch('https://jsonplaceholder.typicode.com/posts')
#   .then(response => response.json())
#   .then(data => console.log(data))
#   .catch(error => console.error('Error:', error));

"""Инструменты"""
# npm (Node Package Manager) - менеджер пакетов для JS, позволяющий устанавливать и управлять библиотеками и зависимостями.

# Webpack - модульный бандлер, который позволяет собирать JS-файлы и другие ресурсы (HTML, CSS) в один или несколько бандлов для оптимизации загрузки.

# Babel - транспайлер, позволяющий использовать современные возможность JS (ES6+) и преобразовывать из в более старые версии для совместимости со старыми браузерами.

# ESLint - инструмент для статического анализа кода, помогающий находить и исправлять проблемы в JS-коде, а также соблюдать стандарты кодирования.


"""Библиотеки и фреймворки"""
# React - UI-библиотека для создания пользовательских интерфейсов от Facebook. Компонентный подход и VirtualDom для оптимизации производительности.
# Vue.js - прогрессивный фреймворк для создания пользовательских интерфейсов.
# Angular - фреймворк от Google для создания одностраничных приложений (SPA). Предлагает маршрутизацию и управление состоянием.
# jQuery - библиотека, упрощающая работу с DOM и AJAX.


"""Тестирование"""
# Jest - фреймворк для тестирования JS
# Mocha - гибкий фреймворк для тестирования в разных стилях (TDD, BDD)
# Chai - библиотека утверждений, используемая (часто) c Mocha для написания тестов.

"""Принципы проектирования"""
# DRY - избегайте дублирования кода, создавая функции и модули для повторяющихся задач
# KISS - упрощайте код и делайте его более понятным. Сложные решения приведут к ошибкам и трудностям.
# YAGNI - не добавляйте функциональность, которая не требуется в данный момент.


"""Советы по производительности"""
# Минифакация и сжатие - используйте инструменты вроде Webpack или Gulp для минификации и сжатия JS-кода
# LazyLoad - подгрузка ресурсов по мере необходимости.
# Оптимизация работы с DOM - минимизируйте количество операций с DOM, так как они медленные. Используйте VirtualDom или группируйте изменения.


"""Безопасность"""
# XSS (Cross-Site Scripting) - избегайте внедрения пользовательского ввода в HTML без соответствующей обработки. Используйте функции экранирования.
# CSRF (Cross-Site Request Forgery) - используйте токены для защиты от подделки запросов.
# CORS (Cross-Origin Resource Sharing) - настройте CORS для управления доступом к ресурсам вашего API из других доменов.