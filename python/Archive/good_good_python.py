"""Напишите программу, которая заменяет в списке двузначные числа нулём"""
# digs = [4, 3, 100, -53, -30, 1, 34, -8]
#
# for i in range(len(digs)):
#     if 10 <= abs(digs[i]) <= 99: # таким образом происходит проверка двузначного числа и при этом неважно, является оно положительным, или отрицательным
#         digs[i] = 0
# print(digs)

# # алтернативный вариант с помощью встроенной функции enumerate()
# digs = [4, 3, 100, -53, -30, 1, 34, -8]
#
# for i, d in enumerate(digs):
#     if 10 <= abs(d) <= 99: # таким образом происходит проверка двузначного числа и при этом неважно, является оно положительным, или отрицательным
#         digs[i] = 0 # приравниваем полученное число к нулю
# print(digs)


"""Отображение ёлочки астерисков (от меньшего - к большему)"""
# for i in range(1, 7):
#     print('*' * i)

"""Вычисление факториала"""
# n = int(input("Введите целое число от 1 до 100: "))
# if 1 > n > 100:
#     print("Число введено неверно")
# else:
#    p = 1
#     for i in range(1, n+1):
#         p *= i
#     print(f"Факториал {n}! = {p}")


"""Вычисление суммы: S = 1/2 + 1/3 + 1/4....1/1000"""
# S = 0
# for i in range(2, 1001):
#     S += 1/i
# print(S)


"""Изменение значений элементов списка (на ноль)"""
# d = [1, 2, 3, 4, 5]
# for i in [i**1 for i in range(len(d))]:
#     d[i] = 0
# print(d)


"""Операторы циклов: break, continue, pass"""
# """Прерываем цикл while, когда нашли первое чётное значение в списке"""
# lst = [1, 3, 5, 7, 9, 11, 13, 23, 16]
# flFind = False
# i = 0
#
# while i < len(lst):
#     print(lst[i]) # выводим значения перебора : 0,1,2,3..True
#     flFind = lst[i] % 2 == 0
#     if flFind:
#         break
#     i += 1
# print(f"Цикл завершён, чётное число: {lst[i]}")

# # просим пользователя ввести значения и все нечетные значения будут суммироваться. Когда пользователь вводит число 0, программы перестаёт выполняться
# s = 0
# d = 1
#
# while d != 0:
#     d = int(input("Введние значение: "))
#     if d % 2 == 0:
#         continue
#     s += d # подсчитываем сумму текущих значений
#     print(f"s = {s}")


"""Цикл while"""
# N = 1000 # значение, до которого осуществляем перебор
# s = 0 # храним вычисленную сумму
# i = 1 # значение текущего слогаемого
#
# while i <= N:
#     s += i
#     i += 1
# print(s)

# выводим элементы от 1 до 10 в обратном порядке
# N = -10
# i = -1
# while i >= N:
#     print(i)
#     i -= 1

# выводим все числа последовательности, кратные 3
# N = 20
# i = 1
#
# while i <= N:
#     if i % 3 == 0:
#         print(i)
#     i += 1

"""Запрос на введение пароля (с помощью while)"""
# pass_true = "password"
# ps = ""
#
# while ps != pass_true:
#     ps = input("Введите пароль: ")
#
# print("Вход в систему")


"""Тернарный оператор"""
# a = 12
# b = 7
# res = a if a > b else b
# print(res)
# ветвление
# if a > b:
#     res = a
# else:
#     res = b

# Тернарный оператор, совершающий операции над строками
# s = 'python'
# t = 'upper'
# res = s.upper() if t == 'upper' else s
# print(res)



"""Вложенные списки"""
# line = [1, 7, 6, 11, 3]
# img = [line[:], line[:], line[:], line[:], line[:]]
# img[1] = [0, 0, 0, 0, 0] # замена элементов второго списка на 0
# print(img)
# # print(img[0][1]) # выводим 8
# # второй пример создания списка
# # line = [
# #     [1, 7, 6, 11, 3] * 1 for i in range(5)
# # ]



"""Методы списков"""
# a.append(100) # добавление значения в конец списка
# a.insert(3, -1000)  # позволяет вставлять в список в определённую позицию определённое значение; index, value
# a.remove(1) # позволяет удалить элемент по ЗНАЧЕНИЮ
# a.pop(0)# позволяет удалить элемент по ИНДЕКСУ
# # a.clear() # удаление элементов списка [] =>
# c = a.copy() # копия списка (разные списки); копию можно сделать так: c = a[:] или c = list(a)
# # print(a.count(-45)) # позволяет найти число элементов с указанным значением
# a.index() # позволяет определять индекс определённого значения (index первого найденного значения). если нужен индекс с конца .index(value, start).
# a.reverse() # меняет порядок элементов на обратный
# a.sort() # позволяет выполнять сортировку значений по возрастанию (не убыванию) !!! изменяет список
# d = sorted(a, reverse=True) # ВОЗВРАЩАЕТ новый отсортированный список.


"""Методы строк"""
# text = "abracadabra, abracadabra, abracadabra"
# print(text.upper()) # перевод символов в верхний регистр
# print(text.lower()) # перевод символов в нижний регистр
# print(text.count('br')) # возвращает количество упоминаний подстроки в строке
# print(text.find('k')) # возвращает индекс первого значения подстроки в строке, если символ не существует, выдаёт -1.
# print(text.rfind('a')) # возвращает индекс первого значения подстроки в строке (справа налево)
# # print(text.index('M')) # возвращает индекс первого найденного значения, но если подстроки не существует, выдаёт ошибку
# print(text.replace('a', 'o')) # возвращает индекс первого значения подстроки в строке
# print(text.isalpha()) # возвращает True, если строка целиком состоит из букв и False в обратном случае. (если есть пробел, то будет False)
# print(text.isdigit()) # возвращает True, если строка целиком состоит из цифр, и False - в обратном случае
# print(text.rjust(20, '0')) # возвращает новую строку с заданным количеством параметров width='' слева и при необходимости вставляет символы-заполнители fillchar=''
# print(text.ljust(20, '0')) # возвращает новую строку с заданным количеством параметров width='' и при необходимости вставляет символы-заполнители fillchar=''
# print("Иванов Иван Иванович".split(" ")) # возвращает коллекцию строк, на которую разбивается строка
# print(text.replace(" ", "").split(',')) # возвращает коллекцию строк, на которую разбивается строка + убрали пробелы
# print(text.strip()) # удаляет символы пробела в начале и в конце строки
# print(text.rstrip()) # удаляем символы справа
# print(text.lstrip()) # удаляем символы слева
#
# d = ['1', '2', '3']
# print(",".join(d)) # список превращается в строку



"""Преобразование кириллицы в латиницу"""
# t = ['a', 'b', 'v', 'g', 'd', 'e', 'zh',
#      'z', 'i', 'y', 'k', 'l', 'm', 'n', 'o', 'p',
#      'r', 's', 't', 'u', 'f', 'h', 'c', 'ch', 'sh',
#      'shch', '', 'y', '', 'e', 'yu', 'ya'
#      ] # список соответствия русских букв литинским названиям
#
# start_index = ord('а') # вспомогательная переменная, принимающая значение кода для первой буквы русского алфавита
# title = "Программирование на Python - лучший курс" # вспомогательная переменная, содержащая переводимый заголовок
# slug = '' # вспомогательная переменная, хранящая преобразование кириллицы в латиницу
#
# for s in title.lower(): # в цикле происходит преобразование символов строки
#     if 'а' <= s <= 'я': # проверка: если текущий символ от А до Я
#         slug += t[ord(s) - start_index] # добавляем соответствующее звучание из списка Т[индекс]
#     elif s == 'ё':
#         slug += 'yo'
#     elif s in " !?;:.,":
#         slug += '-'
#     else:
#         slug += s
#
# while slug.count('--'): # если есть более двух дефисов
#     slug = slug.replace('--', '-') # заменяем два дефиса на один
#
# print(slug)

"""Пример вложенного генератора списка"""
# a = [(i, j)
#      for i in range(3) if i % 3 == 0 # можем брать только те значения i, которые кратны трём
#      for j in range(4) if j % 2 == 0 # можем брать только те значения j, которые кратны двум
# ]
#
# print(a)

"""Таблица умножения с помощью вложенного генератора списка"""
# t = [f"{i}*{j} = {i*j}"
#     for i in range(10)
#      for j in range(10)
# ]
# print(*t, sep="\n")


"""Поиск ключа по значению"""
# d = {
#     1: "дом",
#     "car": "машина",
#     "tree": "дерево",
#     "road": "дорога",
#     "river": "река"
# }
#
# print("Index:", list(d.keys()) # выводим ключ по значению
# [list(d.values()).index("река")]) # в скобках .index() указываем значение









