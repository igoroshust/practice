Методы всех типов данных
Виды ошибок
Переменная
Структуры данных
Пакетные менеджеры
Менеджеры контекста
Git
GitHub
DjangoORM
Webpack
Vite
PEP8
ZEN OF PYTHON
Встроенные функции
Встроенные типы
Команда
Инструкция
Функция
Метод
Класс
Аргумент
Параметр
Алгоритмы
bs4
МЕСТО ERP в приложении (синхронизация)
Мутирующие/Немутирующие сущности в пайтон
Инструкция и Выражение
ГЕНЕРАТОРЫ ИТЕРАТОРЫ YIELD
ЗИП МАП ФИЛЬТЕР и другие встроенные малознакомые функции
ЛЯМБДА-функции
ДЕКОРАТОРЫ
ОТЛИЧИЕ WHILE от FOR
СТАТИКМЕТОД, КЛАССМЕТОД
ОБЛАСТЬ ВИДИМОСТИ ПЕРЕМЕННОЙ


"""Метод"""
# Метод - это функция, которая применяется к определённому объекту, используя символ точку.

"""Вируальные окружения"""
# Виртуальное окружение в Python - это инструмент, который позволяет создавать изолированные среды для проектов, в которых
# можно устанавливать зависимости и библиотеки, не влияя на глобальную установку Python и другие проекты.

# Внутри копируется интерпретатор, от которого данное окружение было создано, и стандартные модули (os, sys, etc...)

"""Каталог Пакетов (PyPI)"""
# В стандартной библиотеке немало модулей и пакетов с ограниченным функционалом, поэтому существует каталог пакетов
# (PyPI - Python Package Index), где содержаться пакеты, написанные другими разработчиками. Все пакеты храняться в репозитории
# на сайте pypi.org. Каждый проект содержит описание, ссылки и исходный код и документацию по использованию.

"""Пакетные менеджеры (pip, pipenv, conda)"""
# Пакетный менеджер (или система управления пакетами) - используется для установки и управления программными пакетами.
# Предоставляют интерфейс, позволяющий с помощью команд установить или удалить пакет по названию.

# pip является модулем, написанным на Python, и позволяет работать только с установкой Python-пакетов.


"""Пакет"""
# Пакет - способ организации модулей в иерархическую структуру. Пакет представляет собой директорию, содержащую один
# или несколько модулей и файл `__init__.py`, указывающий Python, что директория является пакетом.
# Структура: пакеты могут содержать подкаталоги (подпакеты), что позволяет создавать сложные иерархии.

# # Наличие `__init__.py`
# Идентификация пакета. Начилие файла `__init__.py` позволяет Python распознавать и импортировать модули из этой директории.
# Если файл отсутствует, Python не будет рассматривать директорию как пакет и мы не сможем импортировать модули из неё.


"""Что такое зависимости?"""
# Зависимости - это набор модулей и библиотек, необходимых для работы проекта.

"""Что такое библиотека?"""
# Библиотекой (модулем) в Python фактически является любой файл, содержащий программный код. Даже простейший скрипт, содержащий
# всего 1 строку, можно назвать модулем. Программисты пишут модули для решения самых разнообразных задач и публикуют их
# в свободном доступе, чтобы желающие могли подключать их без изобретения велосипеда.

# Библиотека - это более общее понятие, которое обычно относится к набору модулей и пакетов, предоставляющих определённые
# функции или возможности. Библиотека может состоять из одного или нескольких пакетов и модулей

"""Что такое стандартная библиотека в Python?"""
# Это набор модулей и пакетов, которые поставляются вместе с интерпретатором Python и предоставляют множество полезных
# функций и инструментов для разработки программ.

# # Примеры:
# os, sys, math, datetime, json, sqlite3, re, http


"""Что такое IDLE?"""
# IDLE - интегрированная среда разработки и обучения на языке Python (англ. Integrated Development and Learning Environment).
# IDLE предназначена для упрощения процесса написания, тестирования и отладки кода на Python.
# Содержит интерактивную оболочку, редактор кода, отладку. Является частью стандартной библиотеки Python.

"""Что такое IDE?"""
# IDE - интегрированная среда разработки. Это программы для написания програм (IDLE, PyCharm, Spyder, VSCode, PyDev).
# IDE состоит из 3 основных объектов:
# 1. Текстового редактора, позволяющего писать код;
# 2. Транслятора (в Python - интерпретатора), исполняющего код;
# 3. Отладчика, позволяющего пошагово изучить программу и облегчить поиск ошибок.

"""Что такое программа?"""
# Программа - последовательность инструкций, написанных на ЯП, которые выполняются компьютером для выполнения определённой задачи
# или решения конкретной проблемы.

# # --------------- Основные характеристики программы -------------- # #
# 1. Инструкции. Программа состоит из набора команд или инструкций, которые определяют, какие действия должен выполнить компьютер.
# Эти инструкции включают арифметические операции, логические операции, ввод и вывод данных, управление потоком выполнения и другие действия.
# 2. Язык программирования.
# 3. Алгоритмы. Алгоритмы - чётко определённые последовательности шагов для решения задачи.
# 4. Входные и выходные данные. Входные - принимаем от пользователя или из файла, выходные - выводим на экран или записью в файл.
# 5. Исполняемость. Программы могут быть исполняемыми (скомпилированные или интерпретируемые) и могут выполняться на различных платформах.
# 6. Структура. Программы могут иметь различные структуры, включая функции, классы и модули, что позволяет организовать код и сделать его более читаемым или поддерживаемым.
