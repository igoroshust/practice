# dependency injection
# Рекурсивная функция.
# items(), zip(), map(), filter() + отличие map от фильтер
# Функция - что это? + Переменная - что это?
# Docker, Compose
# Алгоритмы сортировки
# Что такое переменная
# raise
# if __name__ == '__main__'
# __repr__, __str__, __init__, dander methods all
# ООП + SOLID + Принципы ООП
# self
# Как браузер отображает веб страницу
# Протокол - определение, Что такое Http
# Структуры данных
# Что такое типы данных
# Что называют коллекцией в Python
# npm
# ASCII, Unicode
# Asgi, wsgi
# Try, Except, Match, Switch
# Типы ошибок
# СВЯЗИ В ТАБЛИЦАХ ДЖАНГО
# Методы всех типов данных
# Виды ошибок
# Переменная
# Структуры данных
# Пакетные менеджеры
# Менеджеры контекста
# Git
# GitHub
# DjangoORM
# Webpack
# Vite
# PEP8, PyPI, pip
# ZEN OF PYTHON
# Встроенные функции
# Встроенные типы
# Команда
# Инструкция
# Функция
# Метод
# Класс
# Аргумент
# Параметр
# Алгоритмы
# bs4
# МЕСТО ERP в приложении (синхронизация)
# Мутирующие/Немутирующие сущности в пайтон
# Инструкция и Выражение
# ГЕНЕРАТОРЫ ИТЕРАТОРЫ YIELD
# ЗИП МАП ФИЛЬТЕР и другие встроенные малознакомые функции
# ЛЯМБДА-функции
# ДЕКОРАТОРЫ
# ОТЛИЧИЕ WHILE от FOR
# СТАТИКМЕТОД, КЛАССМЕТОД
# ОБЛАСТЬ ВИДИМОСТИ ПЕРЕМЕННОЙ
# МЕТДЫ КОРТЕЖЕЙ И СЛОВАРЕЙ
# Отличие циклов ФОР и ВАЙЛ
# ИТЕРАЦИЯ ИТЕРИРУЕМЫЕ ОБЪЕКТЫ (СПИСОК ИТЕРИРУЕМЫХ ОБЪЕКТОВ) - ГЕНЕРАТОРЫ ИТЕРАТОРЫ
# ОПЕРАЦИИ ОПЕРАТОРЫ ОПЕРАНДЫ ИНСТРУКЦИИ ВЫРАЖЕНИЯ



"""SOLID"""
# SOLID - набор принципов, помогающих разработчикам создавать более понятный, гибкий и поддерживаемый код.
# Эти принципы особенно полезны при разработке на ООП-языках (Python).

# [S] - Single Responsibility Principle - принцип единой ответственности.
# Каждый класс должен выполнять только одну задачу. Это делает код более понятным и упрощает его поддержку.
# Например, если есть класс, отвечающий за обработку данных и за вывод информации на экран, лучше разделить его на 2 класса.
# ~ Лучше делегировать тестирование команде, чем всё делать самому.


# [O] - Open/Closed Principle - принцип открытости/закрытости. Классы должны быть открыты для расширения, но закрыты для модификации.
# Это значит, что можно добавлять новый функционал, не изменяя существующий код. Достигается посредством наследования и использования интерфейсов.
# Код, который мы пишем, должен быть масштабируемм, то есть должна быть возможность для его расширения.
# Внесение изменений в коде не должно требовать изменений в существующем коде.

# [L] - Liskov substitution principle - принцип подстановки Барбары Лисков. Это принцип ООП, касающийся классов, интерфейсов,
# типов и подтипов. Суть его в том, что каждый подтип должен дополнять, а не заменять базовый тип.
# Объекты подкласса должны быть взаимозаменяемыми с объектами суперкласса. То есть, если у нас есть класс, который использует базовый класс,
# он должен работать корректно и с подклассами. Например, если у нас есть класс `Bird` и подкласс `Pinguin`, то код, который работает с `Bird`,
# должен также работать с `Pinguin` (по возможности).
# ~ Квадрат, это разновидность прямоугольника. То есть подтип типа, который не изменяет сам тип.

# [I] - Interface segregation principle - принцип разделения интерфейса. Ни один клиент не может зависеть от методов, которые он не использует.
# Проще говоря: не добавляйте дополнительные функции в уже существующий интерфейс, добавляя новые методы. Вместо этого создайте новый интерфейс
# и позвольте вашему классу реализовать несколько интерфейсов при необходимости.
# Лучше иметь несколько специализированных интерфейсов, чем один универсальный.
# ~ В приложении добавили китайский язык сабтайтлом к уже существующему русскому вместо создания опции переключения.

# [D] - Dependency Inversion Principle (Принцип инверсии зависимостей). Модули верхнего уровня не должны зависеть от модулей нижнего уровня.
# Оба должны зависеть от абстракций. Это позволяет уменьшить связанность между компонентами системы. В Python это можно реализовать с помощью внедрения зависимостей (dependency injection)



"""args, kwargs"""
# Позиционные аргументы - аргументы зависят от позиции. Меняя порядок, меняем значение.
# def func (a, b, c)
# func(1, 2, 3) - позиционные аргументы

# Именованные аргументы - указание значения параметра в явном виде.
# func(с=3, b=2, a=1)

# *args - функция принимает неограниченное количество позиционных аргументов. args - кортеж
# **kwargs - функция принимает неограниченное количество именованных аргументов. kwargs - словарь
# *args и **kwargs используются для распаковки элементов соответствующего типа.

# Пример args
# def adder(*args):
#     sum_ = 0
#     for n in args:
#         sum_ += n
#
#     return sum_
# print(adder(1, 2, 3, 10))

# Пример kwargs
# def print_info(**kwargs):
#     for key, value in kwargs.items():
#         print(f'{key}: {value}')
#
# print_info(name='Alice', age=30, city='New York')


"""Функции"""
# Функции – обособленный участок кода, который можно вызвать несколько раз, обратившись к нему по имени, которым он был назван.
# Функция - это блок кода, который начинается с ключевого слова def, затем следует название функции и двоеточие в конце.
# При вызове функции происходит выполнение команд тела функции (команд, находящихся внутри функции).

# Для чего нужны функции?
# 1. Структурирование кода. Повышает читабельность;
# 2. Выполнение одной задачи несколько раз;
# 3. Выполнение одной задачи с различными входными данными.

# Параметры в функции - это переменные, которые определяются при объявлении функции. Параметры определяют, какие данные функция ожидает получить.
# Параметры - значения, которые функция готова принимать извне для обработки и изменения результата своей работы.
# def greet(name): # 'name' - это параметр!
#     print(f'Hello, {name}')

# Аргументы - это фактические значения, передаваемые функции при её вызове.
# Аргументы могут являться константами, переменными или выражениями, которые соответствуют параметрам функции.
# greet('Igor') # - это аргумент

# Аргументы бывают обязательными и необязательными.
# Обязательные аргументы - должны быть переданы функции при её вызове.
# def multiply(a, b):  # 'a' и 'b' — обязательные аргументы

# Необязательные аргументы - аргументы, имеющие значения по умолчанию. Если не передаём значение, используем значение по умолчанию.
# def greet(name, greeting="Hello"):  # 'greeting' — необязательный аргумент с значением по умолчанию

# Возвращаемое значение - то, что мы получаем в результате выполнения работы функции.

"""Итератор"""
# Итератор - объект, позволяющий получить доступ к следующему элементу в последовательности.
# Итератор - объект, реализующий протокол итерации, состоящий из 2 методов:
# - `__iter__()` - возвращает сам итератор
# - `__next__()` - возвращает следующий элемент последовательности. Вызывает `StopIteration`, если элементы закончились.

# Пример простого итератора:
# class MyIterator:
#     def __init__(self, max):
#         self.max = max
#         self.current = 0
#
#     def __iter__(self):
#         return self
#
#     def __next__(self):
#         if self.current < self.max:
#             self.current += 1
#             return self.current - 1
#         else:
#             raise StopIteration
#
# for number in MyIterator(5):
#     print(number)

"""Итерация"""
# Итерация - процесс последовательного обхода элементов итерируемого объекта.
# Осуществляется с помощью for, который автоматически вызывает методы `__iter__()` и `__next__()`

# Пример итерации:
# my_list = [1, 2, 3]
# for item in my_list:
#     print(item)

"""Итерируемый объект"""
# Итерируемый объект - это объект, который может быть итерирован, то есть у него есть метод `__iter__()`, который возвращает итератор.
# Примеры итерируемых объектов: списки, кортежи, строки, множества и словари.

# Пример итерируемого объекта:
# my_list = [1, 2, 3]
# iterator = iter(my_list) # (!!!) Получаем iterator из итерируемого объекта.
# print(next(iterator))
# print(next(iterator))
# print(next(iterator))


"""Генератор"""
# Генератор - это специальный вид итератора, который создаётся с помощью функции, содержащей одно или несколько выражений yield.
# Генераторы позволяют создавать итераторы более простым и удобным способом, чем с помощью классов.
# Генератор - это итератор, элементы которого можно итерировать только 1 раз.
# Генераторы позволяют экономить память, так как они создают значения по мере необходимости, а не хранят их все в памяти сразу.

# Пример генератора:
# def my_generator():
#     yield 1
#     yield 2
#     yield 3
#
# for value in my_generator():
#     print(value)

"""Как отличить Итератор от Итерируемого объекта?"""
# 1. Методы.
# Итератор должен реализовать оба метода: `__iter__()` и `__next__()`.
# Итерируемый объект должен реализовать только метод `__iter__()`, который возвращает итератор.

# 2. Использование.
# Итерируемый объект можно использовать в цикле `for` или передать в функцию `iter()`, чтобы получить итератор.
# Итератор используется для последовательного доступа к элементам, и его нельзя использовать повторно после завершения итерации (нужно создать новый итератор)

# Примеры
# Итерируемые объекты: строки, списки, словари, кортежи, множества
# Итераторов: объекты, созданные с помощью пользовательских классов, которые реализуют методы `__iter__()` и `__next__()`, а также генераторы.

# class MyIterable:
#     def __init__(self, max):
#         self.max = max
#
#     def __iter__(self):
#         return MyIterator(self.max) # Возвращаем итератор
#
# class MyIterator:
#     def __init__(self, max):
#         self.max = max
#         self.current = 0
#
#     def __iter__(self):
#         return self
#
#     def __next__(self):
#         if self.current < self.max:
#             self.current += 1
#             return self.current - 1
#         else:
#             raise StopIteration
#
# # Создаём итерируемый объект
# my_iterable = MyIterable(3)
#
# # Используем его в цикле for
# for number in my_iterable:
#     print(number)

# Заключение
# - Итератор - это объект, позволяющий последовательно получать элементы из коллекции и реализует методы `__iter__()` и `__next__()`.
# - Итерируемый объект - это объект, который может быть итерирован и имеет метод `__iter__()`, возвращающий итератор.
# Итератор используется для обхода элементов, а итерируемые объекты служат источником для итераторов.



"""Коллекция и Последовательность"""
# ----------------------- Коллекция -----------------------
# Коллекция - это общее понятие, относящееся к структурам данных, позволяющим хранить и управлять множеством элементов.
# Коллекции могут содержать элементы различных типов и предоставляют различные способы доступа к элементам.

# Типы коллекций:
# - Списки. УПОРЯДОЧЕННАЯ ИЗМЕНЯЕМАЯ коллекция, способная содержать элементы различных типов.
# - Кортежи. УПОРЯДОЧЕННЫЕ НЕИЗМЕНЯЕМЫЕ коллекции.
# - Множества. НЕУПОРЯДОЧЕННЫЕ ИЗМЕНЯЕМАЯ коллекция уникальных элементов. Множества не допускают дубликатов.
# - Словари. НЕУПОРЯДОЧЕННАЯ ИЗМЕНЯЕМАЯ коллекция пар "ключ-значение". Каждый ключ - уникальный, значение - объект любого типа.

# ----------------------- Последовательность -----------------------
# Последовательность - специальный тип коллекции, поддерживающий порядок элементов и позволяет получить доступ к элементам по его индексу.
# - Cписки. Упорядоченная последовательность. Можем обращаться по индексу.
# - Кортежи. Упорядоченная последовательность. Можем обращаться по индексу.
# - Строки. Можем обращаться по индексу.

# ----------------------- Резюме -----------------------
# Коллекция - это общее понятие, охватывающее различные структуры данных, позволяющее хранить множество элементов.
# Последовательность - это подмножество коллекций, поддерживающее порядок элементов и доступ по индексам.


"""Цикл While"""
# Цикл - это конструкция в программировании, позволяющая повторять выполнение определённого блока кода несколько раз.
# Циклы используются для автоматизации повторяющихся задач, что делает код более компактным и удобным для чтения.

# While - тип цикла, выполняющий блок кода до тех пор, пока заданное условие истинно. В начале каждой итерации цикла проверяется условие..
# .. и если оно истино, то выполняется тело цикла. Если условие становится ложным, выполнение цикла прекращается.
# Условный оператор `while` в Python используется для выполнения блока кода, пока заданное условие истино.

"""Цикл For"""
# Цикл For - это конструкция, позволяющая выполнять блок кода несколько раз, перебирая элементы последовательности.
# Используется в ситуациях, когда нужно выполнить тело цикла определённое количество раз.


"""Условный оператор"""
# Условный оператор - это конструкция, позволяющая выполнить определённые блоки кода в зависимости от истинноси или ложности заданного условия.
# Используется для управления потоком выполнения программы, позволяя принимать решения на основе логических выражений.

"""Операторы и операнды"""
# Оператор - обозначение некой операции. Операторы производят действия (операции) над данными.
# Операнды - данные, над которыми выполняются действия.
# 1. Унарные. Для их работы требуется одно значение. Например, not.
# 2. Бинарные. Для их работы требуется два значения. Например, "+".
# 3. Тернарные. Используют три операнда. Например, "value_if_true if condition else value_if_false"

# Виды операторов:
# 1. Операторы сравнения (в результате выдают булеву переменную): # < > <= >= == !=
# 2. Арифметические операторы: + - * / // % **

# 3. Логические операторы: not, and, or,
# 4. Операторы принадлежности: in, not in. Возвращает True, если проверяемая переменная содержится (или не содержится) в последовательности.
# 5. Операторы идентичности: is, is not. Возвращает True, если проверяемые объекты эквивалентны (или не эквивалентны), то есть переменные ссылаются на один и тот же адрес в памяти.

# 4. Побитовые операторы (работают с битами целых чисел): & | ^ ~ << >> : побитовое И ИЛИ ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR) НЕ сдвиг влево вправо
# 5. Присваивание: = += (прибавить или присвоить), -= (вычесть или присвоить), *= (умножить или присвоить), /= (разделить или присвоить) и т.д.


"""Метод"""
# Метод - это функция, которая применяется к определённому объекту, используя символ точку.

"""Вируальные окружения"""
# Виртуальное окружение в Python - это инструмент, который позволяет создавать изолированные среды для проектов, в которых
# можно устанавливать зависимости и библиотеки, не влияя на глобальную установку Python и другие проекты.

# Внутри копируется интерпретатор, от которого данное окружение было создано, и стандартные модули (os, sys, etc...)

"""Каталог Пакетов (PyPI)"""
# В стандартной библиотеке немало модулей и пакетов с ограниченным функционалом, поэтому существует каталог пакетов
# (PyPI - Python Package Index), где содержаться пакеты, написанные другими разработчиками. Все пакеты храняться в репозитории
# на сайте pypi.org. Каждый проект содержит описание, ссылки и исходный код и документацию по использованию.

"""Пакетные менеджеры (pip, pipenv, conda)"""
# Пакетный менеджер (или система управления пакетами) - используется для установки и управления программными пакетами.
# Предоставляют интерфейс, позволяющий с помощью команд установить или удалить пакет по названию.

# pip является модулем, написанным на Python, и позволяет работать только с установкой Python-пакетов.


"""Пакет"""
# Пакет - способ организации модулей в иерархическую структуру. Пакет представляет собой директорию, содержащую один
# или несколько модулей и файл `__init__.py`, указывающий Python, что директория является пакетом.
# Структура: пакеты могут содержать подкаталоги (подпакеты), что позволяет создавать сложные иерархии.

# # Наличие `__init__.py`
# Идентификация пакета. Начилие файла `__init__.py` позволяет Python распознавать и импортировать модули из этой директории.
# Если файл отсутствует, Python не будет рассматривать директорию как пакет и мы не сможем импортировать модули из неё.


"""Что такое зависимости?"""
# Зависимости - это набор модулей и библиотек, необходимых для работы проекта.

"""Что такое библиотека?"""
# Библиотекой (модулем) в Python фактически является любой файл, содержащий программный код. Даже простейший скрипт, содержащий
# всего 1 строку, можно назвать модулем. Программисты пишут модули для решения самых разнообразных задач и публикуют их
# в свободном доступе, чтобы желающие могли подключать их без изобретения велосипеда.

# Библиотека - это более общее понятие, которое обычно относится к набору модулей и пакетов, предоставляющих определённые
# функции или возможности. Библиотека может состоять из одного или нескольких пакетов и модулей

"""Что такое стандартная библиотека в Python?"""
# Это набор модулей и пакетов, которые поставляются вместе с интерпретатором Python и предоставляют множество полезных
# функций и инструментов для разработки программ.

# # Примеры:
# os, sys, math, datetime, json, sqlite3, re, http


"""Что такое IDLE?"""
# IDLE - интегрированная среда разработки и обучения на языке Python (англ. Integrated Development and Learning Environment).
# IDLE предназначена для упрощения процесса написания, тестирования и отладки кода на Python.
# Содержит интерактивную оболочку, редактор кода, отладку. Является частью стандартной библиотеки Python.

"""Что такое IDE?"""
# IDE - интегрированная среда разработки. Это программы для написания програм (IDLE, PyCharm, Spyder, VSCode, PyDev).
# IDE состоит из 3 основных объектов:
# 1. Текстового редактора, позволяющего писать код;
# 2. Транслятора (в Python - интерпретатора), исполняющего код;
# 3. Отладчика, позволяющего пошагово изучить программу и облегчить поиск ошибок.

"""Что такое программа?"""
# Программа - последовательность инструкций, написанных на ЯП, которые выполняются компьютером для выполнения определённой задачи
# или решения конкретной проблемы.

# # --------------- Основные характеристики программы -------------- # #
# 1. Инструкции. Программа состоит из набора команд или инструкций, которые определяют, какие действия должен выполнить компьютер.
# Эти инструкции включают арифметические операции, логические операции, ввод и вывод данных, управление потоком выполнения и другие действия.
# 2. Язык программирования.
# 3. Алгоритмы. Алгоритмы - чётко определённые последовательности шагов для решения задачи.
# 4. Входные и выходные данные. Входные - принимаем от пользователя или из файла, выходные - выводим на экран или записью в файл.
# 5. Исполняемость. Программы могут быть исполняемыми (скомпилированные или интерпретируемые) и могут выполняться на различных платформах.
# 6. Структура. Программы могут иметь различные структуры, включая функции, классы и модули, что позволяет организовать код и сделать его более читаемым или поддерживаемым.


"""Что такое блок-схема?"""
# Это способ графического представления алгоритма, в котором шаги изображаются в виде блоков различной формы, соединённых между собой стрелками.