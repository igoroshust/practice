"""–í—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–π"""
n = int(input())
alphabet = [chr(i) for i in range(ord('a'), ord('z') + 1)]

print(alphabet[:n])


"""–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ"""
# s1, s2, s3 = input().strip(), input().strip(), input().strip()
#
# # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–æ–∫
# words = [s1, s2, s3]
#
# # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
# words.sort()
#
# # –í—ã–≤–æ–¥–∏–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏
# print(' '.join(words))


"""–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è 2 —Å—Ç—Ä–æ–∫–∏. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ, –Ω–µ —É—á–∏—Ç—ã–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Å–µ –Ω–µ–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
# # –†–µ—à–µ–Ω–∏–µ –ò–ò
# s1, s2 = input().strip(), input().strip()
#
#
# def clean_string(s):
#     cleaned = ''
#     for char in s:
#         if char.isalpha():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π
#             cleaned += char.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
#     return cleaned
#
#
# # –û—á–∏—â–∞–µ–º –æ–±–µ —Å—Ç—Ä–æ–∫–∏
# cleaned_s1 = clean_string(s1)
# cleaned_s2 = clean_string(s2)
#
# # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
# if cleaned_s1 == cleaned_s2:
#     print('YES')
# else:
#     print('NO')


"""–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞. –í —à–∫–æ–ª–µ BEEGEEK –Ω–∞–∑–≤–∞–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–µ–æ–±—ã—á–Ω—ã–µ. –û–Ω–∏ –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:
<–Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞><–±—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞>
–≥–¥–µ <–Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞> –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 (–∫–∞–∫ –∏ –≤—Å–µ —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤) –¥–æ 9 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ,
–∞ –±—É–∫–≤–æ–π –∫–ª–∞—Å—Å–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Å–µ –±—É–∫–≤—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç ¬´–ê¬ª –¥–æ ¬´–ü¬ª –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ."""
# # –†–µ—à–µ–Ω–∏–µ –ò–ò
# import re
#
# # –ß–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
# n = int(input())
#
# # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª–∞—Å—Å–∞
# pattern = r'^[0-9][A-–ü]$'
#
# results = []
#
# for _ in range(n):
#     class_name = input().upper().strip()
#     if re.match(pattern, class_name):
#         results.append('YES')
#     else:
#         results.append('NO')
#
# # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
# for result in results:
#     print(result)


# # –ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
# echo_num = int(input())
# echo_str = ''
# dex = 0
#
# alphabet = []
# # alphabet = [chr(i) for i in range(ord('–ê'), ord('–ü') + 1)] - –º–æ–∂–Ω–æ –∏ —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å
# numbers = [i for i in range(10)]
# result = []
# start_char = '–∞'
#
# for i in range(16):
#     alphabet.append(chr(ord(start_char) + i).upper())
#
# while dex < echo_num:
#     echo_str = input()
#     result.append(echo_str)
#     dex += 1
#
# for i in result:
#     if len(i) >= 3:
#         if i[0].isdigit() and i[1].isdigit():
#             num = str(i[0] + i[1])
#             if (int(num) in numbers) and i[2] in alphabet:
#                 print('YES')
#             else:
#                 print('NO')
#         else:
#             print('NO')
#
#     elif len(i) == 2:
#         if i[0].isdigit() and i[1].isalpha():
#             if (int(i[0]) in numbers) and (i[1].upper() in alphabet):
#                 print('YES')
#             else:
#                 print('NO')
#         else:
#             print('NO')
#
#     elif len(i) <= 1:
#         print('NO')
#
#     else:
#         print('NO')


"""–í –Ω–µ–∫–æ—Ç–æ—Ä–æ–º –Ω–∞–±–æ—Ä–µ —Å–ª–æ–≤ –°—ç–º –Ω–∞—Ö–æ–¥–∏—Ç "–≤–æ–ª—à–µ–±–Ω–æ–µ" —á–∏—Å–ª–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É: –±–µ—Ä–µ—Ç —Å–∞–º—É—é "–º–∞–ª–µ–Ω—å–∫—É—é" –∏ —Å–∞–º—É—é "–±–æ–ª—å—à—É—é"
—Å—Ç—Ä–æ–∫–∏, –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç Unicode-–∫–æ–¥—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç.
–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —è–≤–ª—è–µ—Ç—Å—è "–≤–æ–ª—à–µ–±–Ω–æ–µ" —á–∏—Å–ª–æ"""

# lst = [input() for i in range(4)]
#
# result = (ord(min(lst)[-1]) * ord(max(lst)[-1]))**2
#
# print(result)


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
# # –†–µ—à–µ–Ω–∏–µ –ò–ò
# result = []
#
# while True:
#     s = input().strip()
#     if s == '–ö–û–ù–ï–¶':
#         break
#     result.append(s)
#
# if result: # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
#     print(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚¨áÔ∏è: {min(result)}')
#     print(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚¨ÜÔ∏è: {max(result)}')
# else:
#     print("–ù–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.")


# # –ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
# s = ''
# result = []
#
# while s != '–ö–û–ù–ï–¶':
#     s = input()
#     result.append(s)
#
# result = result[:-1]
#
# print(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚¨áÔ∏è: {min(result)}')
# print(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚¨ÜÔ∏è: {max(result)}')


"""–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
# # –í–≤–æ–¥: Hello, my name is [u-1061][u-1072][u-1082][u-1080]!
# # –í—ã–≤–æ–¥: Hello, my name is –•–∞–∫–∏!
# s = input()
#
# result = ""
# i = 0
#
# while i < len(s):
#     # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ [u-
#     start = s.find("[u-", i)
#
#     if start == -1:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
#         result += s[i:]
#         break
#
#     # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
#     result += s[i:start]
#
#     # –ò—â–µ–º –∫–æ–Ω–µ—Ü –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
#     end = s.find("]", start)
#
#     if end == -1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
#         result += s[start:]
#         break
#
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞
#     unicode_number = int(s[start + 3:end])  # +3 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ "[u-"
#
#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –≤ —Å–∏–º–≤–æ–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
#     result += chr(unicode_number)
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
#     i = end + 1
#
# print(result)


"""–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è"""
# s = int(input())
# message = input()
# result = []
#
# for i in message:
#     # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞
#     new_char_code = ord(i) - s
#
#     # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–æ–¥ –º–µ–Ω—å—à–µ 'a', –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
#     if new_char_code < ord('a'):
#         new_char_code += 26 # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
#
#     result.append(chr(new_char_code))
#
# print(''.join(result))

"""–ó–∞–º–µ–Ω–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –∏ –≤—ã–¥–∞—Ç—å —Å—É–º–º—É ord"""
# s = input()
#
# russian = ['–µ', '—É', '–æ', '—Ä', '–∞', '—Ö', '—Å', '–ï', '–¢', '–û', '–†', '–ê', '–ù', '–•', '–°', '–í', '–ú']
# english = ['e', 'y', 'o', 'p', 'a', 'x', 'c', 'E', 'T', 'O', 'P', 'A', 'H', 'X', 'C', 'B', 'M']
#
# transform_string = ''
# for i in s:
#     if i.lower() in english:
#         dex = english.index(i)
#         transform_string += russian[dex] # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—ë–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª
#     else:
#         transform_string += i # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
#
# old_cost = sum(ord(i) for i in s) * 3 # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# new_cost = sum(ord(i) for i in transform_string) * 3 # –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#
# print(f"""–°—Ç–∞—Ä–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {old_cost}üêù
# –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_cost}üêù""")


"""–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
# s = input()
# s1 = []
#
# for i in s:
#     s1.append(ord(i))
#
# result_sum = sum(s1) * 3
#
# print(f"""–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{s}'
# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {result_sum}üêù""")


"""–ü–æ–¥ "—Ç—è–∂–µ—Å—Ç—å—é" —Å–ª–æ–≤–∞ –±—É–¥–µ–º –ø–æ–Ω–∏–º–∞—Ç—å —Å—É–º–º—É –∫–æ–¥–æ–≤ –ø–æ —Ç–∞–±–ª–∏—Ü–µ Unicode –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 4 —Å–ª–æ–≤–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ä–µ–¥–∏ –Ω–∏—Ö —Å–∞–º–æ–µ —Ç—è–∂—ë–ª–æ–µ —Å–ª–æ–≤–æ.
–ï—Å–ª–∏ —Å–∞–º—ã—Ö —Ç—è–∂—ë–ª—ã—Ö —Å–ª–æ–≤ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤–æ–µ –∏–∑ –Ω–∏—Ö."""
# # –ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
# s, d, v, g = input(), input(), input(), input()
#
# s1 = []
# d1 = []
# v1 = []
# g1 = []
#
# test = []
#
# for i in s:
#     s1.append(ord(i))
#
# for i in d:
#     d1.append(ord(i))
#
# for i in v:
#     v1.append(ord(i))
#
# for i in g:
#     g1.append(ord(i))
#
# result = {s: sum(s1), d: sum(d1), v: sum(v1), g: sum(g1)}
#
# result_max = max(result.values())
#
# max_key = [key for key, value in result.items() if value == result_max] # –Ω–∞—Ö–æ–¥–∏–º –∫–ª—é—á –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
#
# if len(max_key) > 1:
#     print(''.join(max_key[0]))
# else:
#     print(''.join(max_key))

# # –†–µ—à–µ–Ω–∏–µ –ò–ò
# def get_word_weight(word):
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –∫–æ–¥–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ —Å–ª–æ–≤–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ Unicode."""
#     return sum(ord(char) for char in word)
#
# def main():
#     words = [input() for _ in range(4)]
#     max_weight = -1
#     heaviest_word = ""
#
#     for word in words:
#         weight = get_word_weight(word)
#         if weight > max_weight:
#             max_weight = weight
#             heaviest_word = word
#
#     print(heaviest_word)
#
# if __name__ == '__main__':
#     main()


"""–í—ã–≤–æ–¥ –∫–æ–¥–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–æ–∫–∏"""
# s = input()
# formatted_s = s.strip()
#
# for i in formatted_s:
#     print(ord(i), end=' ')

"""–í—ã–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç a –¥–æ b"""
# a, b = int(input()), int(input())
#
# result = []
# for i in range(a, b+1):
#     result.append(chr(i))
#
# print(' '.join(result))


"""–í—ã–≤–µ—Å—Ç–∏ —Å–æ—Å–µ–¥–Ω—é—é –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞"""
# char = input()
# ord_char = ord(char)
# start_word = '–∞'
# result = []
# result_char = ord_char + 1
#
# for i in range(32):
#     result.append((chr(ord(start_word) + i).upper()))
#
# if char == result[-1]:
#     print('–î–∞–ª—å—à–µ –±—É–∫–≤ –Ω–µ—Ç')
# else:
#     print(chr(result_char))


"""–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞"""
# for i in range(26):
#     print(chr(ord('A') + i))

"""–§—É–Ω–∫—Ü–∏–∏"""
# # ord() - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞ —Å–∏–º–≤–æ–ª–æ–≤ Unicode. –ê—Ä–≥—É–º–µ–Ω—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
# num = ord('A')
# print(num) # 65

# # chr() - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–¥—É —Å–∏–º–≤–æ–ª–∞ —Å–∞–º —Å–∏–º–≤–æ–ª. –ê—Ä–≥—É–º–µ–Ω—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–æ–¥
# chr1 = chr(65)
# chr2 = chr(75)
# chr3 = chr(110)
# print(chr1, chr2, chr3) # A K n


"""–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
# # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
# s = input()
#
# if (
#     s.startswith('@')
#     and 5 <= len(s) <= 15
#     and s[1:].isalnum()
#     and s.islower()
# ):
#     print('Correct')
# else:
#     print('Incorrect')

# # –ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ (–Ω–µ –ø—Ä–æ—à–ª–æ —Ç–µ—Å—Ç—ã, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
# user_input = input()
#
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
# if (user_input[0] == '@') and (5 <= len(user_input) <= 15) and (user_input[1:].islower() and user_input[1:].isalnum()):
#     print('Correct')
# else:
#     print('Incorrect')


"""–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
# s = input()
# flag = 'NO'
# correct_letters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•'
#
# if 9 <= len(s) <= 10:
#     letters = s[0] + s[4:6]
#     digits = s[1:4] + s[7:]
#     underscore = s[6]
#
#     if digits.isdigit() and underscore == '_':
#         flag = 'YES'
#
#     for c in letters:
#         if c not in correct_letters:
#             flag = 'NO'
#             break
#
# print(flag)


"""–£–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)"""
# # –ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
# comments_count = int(input())
# result = []
# count = 1
#
# for _ in range(comments_count):
#     comment = input()
#     if comment.isspace() or comment == '':
#         result.append('COMMENT SHOULD BE DELETED')
#     else:
#         result.append(comment)
#
# for i in result:
#     print(f'{count}: {i}')
#     count += 1

# # –†–µ—à–µ–Ω–∏–µ –ò–ò
# comments_count = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: '))
# result = [
#     comment for comment in (input() for _ in range(comments_count))
#     if comment.strip() # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
# ]
#
# for count, comment in enumerate(result, start=1):
#     print(f'{count}: {comment}')


"""–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–∫–≤–∞ ¬´h¬ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Ä–∞–∑–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –±—É–∫–≤—ã ¬´h¬ª,
–∞ —Ç–∞–∫–∂–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏"""
# s = input()
#
# a = s.find('h')
# b = s.rfind('h')
# c = s.replace(s[a:b+1], '')
#
# print(c)


"""–í—ã–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –æ–¥–∏–Ω —Ä–∞–∑ (–µ—Å–ª–∏ –æ–Ω 1), –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–µ—Å–ª–∏ –µ–≥–æ 2), NO - –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç"""
# s = input()
# char = 'f'
#
# if s.count(char) == 1:
#     print(s.index(char))
# elif s.count(char) >= 2:
#     print(
#         s.find(char),
#         s.rfind(char),
#         sep=' '
#     )
# else:
#     print('NO')


"""–í—ã–≤–µ—Å—Ç–∏ —Å–∞–º—ã–π —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–π—Å—è –≤ —Å—Ç—Ä–æ–∫–µ —Å–∏–º–≤–æ–ª"""
# s = input()
#
# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤
# char_count = {}
#
# # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
# for char in s:
#     if char in char_count:
#         char_count[char] += 1
#     else:
#         char_count[char] = 1
#
# # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–π
# max_char = None
# max_count = 0
#
# # –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–π
# for char in s:
#     if char_count[char] > max_count:
#         max_count = char_count[char]
#         max_char = char
#     elif char_count[char] == max_count:
#         max_char = char  # –û–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É
#
# # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# print(max_char)


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –Ω–∞ '.com' –∏–ª–∏ '.ru'"""
# s = input()
#
# result = ('YES' if s.endswith('.com') or s.endswith('.ru') else 'NO')
# print(result)


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Å—Ç—Ä–æ–∫–µ"""
# # –†–µ—à–µ–Ω–∏–µ –ò–ò
# s = input()
# numbers_count = sum(1 for i in s if i.isdigit())
# print(numbers_count)


# # –ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
# s = input()
# numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
# numbers_count = 0
#
# for i in s:
#     if i in numbers:
#         numbers_count += 1
#
# print(numbers_count)


"""–ù–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø–µ—Ä–µ—Å–∏–∫–∞—é—â–∏—Ö—Å—è —Å–∏–≥–Ω–∞–ª–æ–≤ '11' –≤ —Å—Ç—Ä–æ–∫–µ"""
# message_count = int(input())
# odi_messages_count = 0
# odi_signal = '11'
#
# for _ in range(message_count):
#     message = input()
#
#     # –°—á–∏—Ç–∞–µ–º –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –≤—Ö–æ–∂–¥–µ–Ω–∏—è '11'
#     count = 0
#     index = 0 # –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫–µ
#
#     while True:
#         index = message.find(odi_signal, index) # –ø–æ–∏—Å–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–∑–∏—Ü–∏–∏ index
#         if index == -1: # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç
#             break
#         count += 1
#         index += 2 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
#
#     if count >= 3:
#         odi_messages_count += 1
#
# print(odi_messages_count)


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (–î–ù–ö)"""
# s = input()
# formatted_string = s.lower().strip().replace(' ', '')
#
# print(f'''–ê–¥–µ–Ω–∏–Ω: {formatted_string.count('–∞')}
# –ì—É–∞–Ω–∏–Ω: {formatted_string.count('–≥')}
# –¶–∏—Ç–æ–∑–∏–Ω: {formatted_string.count('—Ü')}
# –¢–∏–º–∏–Ω: {formatted_string.count('—Ç')}''')


"""–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
# # –†–µ—à–µ–Ω–∏–µ –ò–ò
# s = input()
# words = s.split()
# words_count = len(words)
# print(words_count)

# # –ú–æ—ë —Ä–µ—à–µ–Ω–∏–µ
# s = input()
# space = s.count(' ')
# print(space + 1)


"""–ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
# text = input()
# count = 0
#
# for i in text:
#     if i.islower():
#         count += 1
#
# print(count)


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Å–ª–æ–≤–æ '—Ö–æ—Ä–æ—à' –≤ –ª—é–±–æ–º –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É"""
# text = input()
# formatted_text = text.lower().replace(' ', '')
#
# search_word = '—Ö–æ—Ä–æ—à'
#
# if search_word in formatted_text:
#     print('YES')
# else:
#     print('NO')


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è (–ø–æ–¥–∞–Ω—ã–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å –ø—Ä–æ–±–µ–ª–æ–º) –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
# initiate = input()
# space = initiate.find(' ')
#
# if initiate[0].isupper() and initiate[space + 1].isupper():
#     print('YES')
# else:
#     print('NO')


"""–ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫"""
# # capitalize() - –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Å –º–∞–ª–µ–Ω—å–∫–æ–π.
# s = 'foO BaR BAZ quX'
# print(s.capitalize())

# # swapcase() - –º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
# s = 'foO BaR BAZ quX'
# print(s.swapcase())

# # title() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
# s = 'the sun also rises'
# print(s.title())

# # lower() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
# s = 'the sun also rises'.upper()
# print(s.lower())

# # islower() - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∏–∂–Ω–µ–º

# # upper() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
# s = 'the sun also rises'.lower()
# print(s.upper())

# # isupper() - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Ö–Ω–µ–º—É


"""–†–∞–∑—Ä–µ–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ 2 —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –º–µ—Å—Ç–∞–º–∏"""
# import math
# num = input()
#
# cut = math.ceil(len(num) / 2)
#
# first_side = num[:cut]
# second_side = num[cut:]
#
# result_side = second_side + first_side
#
# print(result_side)


"""–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–π"""
# num = input()
#
# print(
#     len(num), # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
#     num * 3, # –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω–∞—è 3 —Ä–∞–∑–∞
#     num[0], # –ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏
#     num[:3], # –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏
#     num[-3:], # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏
#     num[::-1], # –°—Ç—Ä–æ–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
#     num[1:-1], # –°—Ç—Ä–æ–∫–∞ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–∞–º–∏
#     num[::-1][::2],  # –í—Å–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
#     sep='\n'
# )


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º"""
# num = input()
#
# formatted_num = num.lower().strip().replace(' ', '')
#
# if formatted_num == formatted_num[::-1]:
#     print('YES')
# else:
#     print('NO')


"""–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–µ"""
# decimal_number = int(input())
#
# # –ü–µ—Ä–µ–≤–æ–¥ –≤ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è
# binary_number = bin(decimal_number)[2:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '0b'
#
# # –í—ã–≤–æ–¥ –¥–≤–æ–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
# print(binary_number)


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
# text = input()
#
# # –°–ø–∏—Å–æ–∫ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤
# vowels = ['–ê', '–ï', '–Å', '–ò', '–û', '–£', '–´', '–≠', '–Æ', '–Ø']
#
# # –°–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤
# consonants = ['–ë', '–í', '–ì', '–î', '–ñ', '–ó', '–ô', '–ö', '–õ', '–ú', '–ù', '–ü', '–†', '–°', '–¢', '–§', '–•', '–¶', '–ß', '–®', '–©']
#
# vowels_count = 0
# consonants_count = 0
#
# for i in text.upper():
#     if i in vowels:
#         vowels_count += 1
#     elif i in consonants:
#         consonants_count += 1
#     else:
#         pass
#
# print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ {vowels_count}')
# print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ {consonants_count}')


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ"""
# char = input()
# index = 1
# count = 0
#
# while index < len(char):
#     for i in char[index]:
#         if i == char[index - 1]:
#             count += 1
#     index += 1
#
# print(count)

# while index < len(char):
#     for i in char:
#         if i == char[index]:
#             count += 1
#     index += 1
#
# print(count)

# for i in char[index]:
#     if (char[index - 1] == i) or (i == char[index + 1]):
#         count += 1
#     index += 1
#
# print(count)


"""–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å–∏–º–≤–æ–ª—ã '+' –∏ '*' –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ"""
# char = input()
# count_plus = 0
# count_asterisk = 0
#
# symbols = ['+', '*']
#
# for i in char:
#     if i == symbols[0]:
#         count_plus += 1
#     elif i == symbols[1]:
#         count_asterisk += 1
#     else:
#         pass
#
# print(f'–°–∏–º–≤–æ–ª + –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count_plus} —Ä–∞–∑')
# print(f'–°–∏–º–≤–æ–ª * –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count_asterisk} —Ä–∞–∑')


"""–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ"""
# num = input()
# formatted_string = num.replace(' ', '') # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
#
# if formatted_string.isalpha():
#     print('–¶–∏—Ñ—Ä –Ω–µ—Ç')
# else:
#     print('–¶–∏—Ñ—Ä–∞')
