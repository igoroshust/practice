"""Модуль random"""
import random
import time

# Модуль random() содержит функции по работе со случайными числами (используются в играх, имитационном моделировании, шифровании, стат.анализе)
# Модуль random() предоставляет функции для генерации случайных чисел, букв и случайного выбора элементов последовательности (списка, строки)

# random.randint(a, b) - возвращает случайное число из отрезка [a;b], ВКЛЮЧАЯ a и b в диапазон генерируемых случайных чисел.
# for _ in range(10): # 10 случайных чисел в диапазоне от 1 до 100
#     print(random.randint(1, 100))

# random.randrange() - в отличии от range(), не возвращает саму последовательность чисел, а возвращает случайно выбранное число из последовательности чисел.
# Отличие от range(), что range() создаёт последовательность, а randrange() только число.
# Отличие от randint() - randrange() исключает конечное значение + позволяет указывать шаг random.randrange(1, 10, 2)
# num = random.randrange(10) # случайное число от 0 до 9

# random.random() - возвращает случайное число с плавающей точкой (вещественное число).
# Функция без аргументов, возвращает случайное число с плавающей точкой в диапазоне от 0.0 до 1.0 (исключая 1.0)
# print((num := random.random())) # случайное число от 0.0 до 1.0 (не включая 1.0)

# random.uniform() - возвращает случайное число с плавающей точкой из диапазона значений
# print((num := random.uniform(1.5, 17.3))) # значения включены в диапазон, шаг не поддерживается

# random.seed(17) - явно указываем начальное значение для генератора случайных чисел (т.к. изначально значение зависит от времени на компьютере)
# Использование seed() - полезный способ контролировать генерацию случайных чисел, особенно в ситуациях, когда нужны тесты с одинаковыми условиями.
# random.seed(17)
#
# for _ in range(10):
#     print(random.randint(1, 100))


# random.shuffle() - принимает список в качестве обязательного аргумента и перемешивает его случайным образом.
# numbers = [1, 2, 3, 4, 5, 6, 7, 8]
# random.shuffle(numbers) # например, [7, 4, 2, 5, 6, 1, 3, 8]
# print(numbers)

# random.choice() - принимает список (строку) в качестве обязательного аргумента и возвращает один случайный элемент из переданного списка (строки)
# print(random.choice('BEEGEEK'))
# print(random.choice([1, 2, 3, 4]))
# print(random.choice(['a', 'b', 'c', 'd']))

# random.sample() - принимает два обязательных аргумента: список (строку) и количество случайных элементов, а возвращает список случайных элементов в указанном количестве
# Если количество элементов больеше длинны списка, то будет ошибка ValueError.
# numbers = [2, 5, 8, 9, 12]
#
# print(random.sample(numbers, 1)) # [9]
# print(random.sample(numbers, 2)) # [12, 5]
# print(random.sample(numbers, 3)) # [9, 2, 8]
# print(random.sample(numbers, 5)) # [12, 8, 9, 5, 2]



"""Подбрасывание кубиков"""
# again = 'д'
#
# while again.lower() == 'д':
#     print('Бросаем кубики...')
#     time.sleep(2)
#     print('Значения граней:')
#     print(random.randint(1, 6))
#     print(random.randint(1, 6))
#
#     again = input('Бросить кубики ещё раз? (д - да, н - нет): ')


"""Имитация бросания монеты"""
# for _ in range(10):
#     num = random.randint(0, 1)
#     if num == 0:
#         time.sleep(2)
#         print('Орёл')
#     else:
#         time.sleep(2)
#         print('Решка')


"""Подать число на вход, выдать минимальное количество попыток для угадывания"""
# from math import log2, ceil
#
# n = int(input())
# attempts = ceil(log2(n + 1))
#
# print(attempts)


"""Менеджер контекста"""
# Менеджер контекста - это конструкция, позволяющая управлять ресурсами, такими как файлы, сетевые соединения или блокировки, с автоматическим управлением их открытием и закрытием.
# Он обеспечивает гарантированное освобождение ресурсов, даже если в процессе работы возникли исключения.

# Основные аспекты менеджера контекста
# Менеджеры контекста обычно используются с оператором `with`. Это позволяет автоматически вызывать методы `__enter__` и `__exit__` при входе и выходе из блока `with`.

# Методы
# `__enter__`: метод вызывается при входе в блок `with`. Он возвращает объект, который будет присвоен переменной, указанной после `as`.
# `__exit__`: метод вызывается при выходе из блока `with`, независимо от того, произошло ли исключение. Он принимает 3 аргумента: тип исключения, значение исключения и объект трейсбека

# Пример использования
# Наиболее распространённый пример использования менеджера контекста - работа с файламиL
with open('theory_conspect.txt', 'r', encoding='utf-8') as file:
    content = file.read()
    print(content)
# Файл автоматически закроется после выхода из блока `with`











