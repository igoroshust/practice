"""SQL"""
# SQL – Язык, использующийся для работы



"""Базы Данных"""
# БД – Организованная структура для хранения, изменения и обработки взаимосвязанной информации.
# Виды БД: Реляционные и Нереляционные.
# СУБД - высокоуровневое ПО, работающее с низкоуровневым API.
# СУБД - общий термин, относящийся ко всем видам абсолютно разных инструментов, от компьютерных программ до встроенных библиотек.
# СУБД - это ПО, позволяющее создавать, управлять и манипуляровать базами данных.
# СУБД обеспечивает пользователям и приложениям возможность эффективно хранить, извлекать и обрабатывать данные.

# Основные функции СУБД:
# 1. Создание и управление БД. Позволяет создавать новые БД, определять их структуру (таблицы, поля, связи) и управлять ими.
# 2. Хранение данных. Обеспечивает надёжное и эффективное хранение данных, включая механизмы для защиты данных от потери и повреждения.
# 3. Извлечение данных. Предоставляет средства для выполнения запросов к данным, позволяя пользователям извлекать нужную информацию с помощью языка запросов SQL.
# 4. Обновление данных. Позволяет изменять, добавлять и удалять данные в БД.
# 5. Управление транзакциями. Поддерживает механизмы управления транзакциями, что обеспечивает целостность данных и согласованность при выполнении операций.
# 6. Безопасность данных. Предоставляет средства для управления доступом к данным, включая аутентификацию пользователей и авторизацию.
# 7. Резервное копирование и восстановление. Предлагает функции для создания резервных копий данных и их восстановления в случае сбоя.

# Типы СУБД
# 1. Реляционные. Данные хранятся в виде таблиц, и связи между ними определяются с помощью ключей. MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server.
# 2. Нереляционные (NoSQL). Эти СУБД не используют таблицы для хранения данных и могут хранить данные в различных форматах, таких как документы, графы или ключ-значение.
# Пример нереляционных БД: MongoDB, Cassandra, Redis.
# 3. Объектно-ориентированные. Данные хранятся в виде объектов, как в объектно-ориентированном программировании. Пример: db4o.
# 4. Графовые. Оптимизированы для работы с графами и связями между данными. Пример: Neo4j.


"""Реализация различных типов связей в SQL"""
# # 1:1
# CREATE TABLE Users (
#     UserID INT PRIMARY KEY,
#     Username VARCHAR(100),
#     Email VARCHAR(100)
# );
#
# CREATE TABLE UserProfiles (
#     ProfileID INT PRIMARY KEY,
#     UserID INT UNIQUE, -- Уникальный внешний ключ
#     FirstName VARCHAR(100),
#     LastName VARCHAR(100),
#     FOREIGN KEY (User ID) REFERENCES Users(UserID) ON DELETE CASCADE
# );

# # 1:M
# CREATE TABLE Authors (
#     AuthorID INT PRIMARY KEY,
#     Name VARCHAR(100)
# );
#
# CREATE TABLE Books (
#     BookID INT PRIMARY KEY,
#     Title VARCHAR(200),
#     AuthorID INT,
#     FOREIGN KEY (AuthorID) REFERENCES Authors(AuthorID) ON DELETE CASCADE
# );

# # M:M
# CREATE TABLE Students (
#     StudentID INT PRIMARY KEY,
#     Name VARCHAR(100)
# );
#
# CREATE TABLE Courses (
#     CourseID INT PRIMARY KEY,
#     CourseName VARCHAR(200)
# );
#
# CREATE TABLE Enrollments (
#     EnrollmentID INT PRIMARY KEY,
#     StudentID INT,
#     CourseID INT,
#     EnrollmentDate DATE,
#     FOREIGN KEY (StudentID) REFERENCES Students(StudentID) ON DELETE CASCADE,
#     FOREIGN KEY (CourseID) REFERENCES Cources(CourseID) ON DELETE CASCADE,
#     UNIQUE (StudentID, CourseID) -- уникальная пара студент-курс
# );